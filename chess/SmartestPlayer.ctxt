#BlueJ class context
comment0.params=b\ s\ c\ smart
comment0.target=SmartestPlayer(Board,\ java.lang.String,\ java.awt.Color,\ int)
comment0.text=\n\ Creates\ an\ instance\ of\ the\ SmartestPlayer\ class\ with\ the\ given\ attributes\n\ \n\ @param\ b\ the\ board\ this\ player\ is\ playing\ in\n\ @param\ s\ the\ name\ of\ this\ player\n\ @param\ c\ the\ color\ of\ this\ player\n\ @param\ smart\ the\ number\ of\ moves\ ahead\ this\ player\ can\ see\n
comment1.params=
comment1.target=Move\ nextMove()
comment1.text=\n\ Decides\ on\ a\ move\ depending\ on\ how\ many\ moves\ to\ look\ ahead\n\ Evaluates\ how\ good\ a\ move\ is\ depending\ on\ how\ well\ the\ opponent\ can\ respond\n\ Chooses\ the\ move\ with\ the\ weakest\ opponent\ response\n\ \n\ @return\ the\ best\ move,\ assuming\ that\ the\ opponent\ is\ just\ as\ smart\ as\ this\ player\n
comment2.params=n
comment2.target=int\ valueOfMeanestResponse(int)
comment2.text=\n\ Computes\ the\ value\ of\ the\ opponent's\ preferred\ move\n\ Finds\ the\ opponent's\ preferred\ move\ by\ knowing\ that\ the\ opponent\ will\ want\n\ this\ player\ to\ have\ a\ bad\ move\n\ \n\ @param\ n\ the\ number\ of\ moves\ to\ look\ ahead\n\ @return\ int\ the\ value\ of\ the\ opponent's\ meanest\ response\n
comment3.params=n
comment3.target=int\ valueOfBestMove(int)
comment3.text=\n\ Computes\ the\ value\ of\ best\ possible\ move\ that\ this\ player\ can\ make\n\ The\ best\ possible\ move\ results\ in\ the\ weakest\ response\ from\ the\ opponent\n\ \n\ @param\ n\ the\ number\ of\ moves\ to\ look\ ahead\ and\ decide\ the\ value\n\ @return\ the\ value\ of\ the\ best\ move\n
comment4.params=
comment4.target=int\ score()
comment4.text=\n\ Scores\ the\ game\ board\ for\ this\ player\n\ Adds\ the\ value\ of\ each\ piece\ if\ it\ belongs\ to\ this\ player\n\ Subtracts\ the\ value\ of\ each\ piece\ that\ belongs\ to\ the\ opponent\n\ \n\ @return\ the\ score\n
numComments=5
