#BlueJ class context
comment0.params=in
comment0.target=Scanner(java.io.Reader)
comment0.text=\n\ Constructor\ for\ Scanner\ objects.\ \ The\ Reader\ object\ should\ be\ one\ of\n\ \ 1.\ A\ StringReader\n\ \ 2.\ A\ BufferedReader\ wrapped\ around\ an\ InputStream\n\ \ 3.\ A\ BufferedReader\ wrapped\ around\ a\ FileReader\n\ \ The\ instance\ field\ for\ the\ Reader\ is\ initialized\ to\ the\ input\ parameter,\n\ \ and\ the\ endOfFile\ indicator\ is\ set\ to\ false.\ \ The\ currentChar\ field\ is\n\ \ initialized\ by\ the\ getNextChar\ method.\n\ @param\ in\ is\ the\ reader\ object\ supplied\ by\ the\ program\ constructing\n\ \ \ \ \ \ \ \ this\ Scanner\ object.\n
comment1.params=
comment1.target=void\ getNextChar()
comment1.text=\n\ The\ getNextChar\ method\ attempts\ to\ get\ the\ next\ character\ from\ the\ input\n\ stream.\ \ It\ sets\ the\ endOfFile\ flag\ true\ if\ the\ end\ of\ file\ is\ reached\ on\n\ the\ input\ stream.\ \ Otherwise,\ it\ reads\ the\ next\ character\ from\ the\ stream\n\ and\ converts\ it\ to\ a\ Java\ String\ object.\n\ postcondition\:\ The\ input\ stream\ is\ advanced\ one\ character\ if\ it\ is\ not\ at\n\ end\ of\ file\ and\ the\ currentChar\ instance\ field\ is\ set\ to\ the\ String\ \n\ representation\ of\ the\ character\ read\ from\ the\ input\ stream.\ \ The\ flag\n\ endOfFile\ is\ set\ true\ if\ the\ input\ stream\ is\ exhausted.\n
comment10.params=
comment10.target=Token\ nextToken()
comment10.text=\n\ Gets\ the\ next\ token\ in\ the\ input\ stream;\ see\ class\ header\ for\ token\ definitions\n\ \n\ @return\ the\ token\n
comment2.params=s
comment2.target=void\ eat(java.lang.String)
comment2.text=\n\ Advances\ the\ input\ stream\ if\ the\ given\ string\ matches\ the\ current\ character\n\ \n\ @param\ s\ the\ current\ string\n
comment3.params=s
comment3.target=boolean\ isLetter(java.lang.String)
comment3.text=\n\ Tells\ if\ a\ given\ string\ is\ a\ single\ letter\n\ \n\ @param\ s\ the\ given\ string\n\ @return\ true\ if\ the\ given\ string\ is\ A-Z\ or\ a-z\n\ \ \ \ \ \ \ \ \ \ false\ otherwise\n
comment4.params=s
comment4.target=boolean\ isDigit(java.lang.String)
comment4.text=\n\ Tells\ if\ a\ given\ string\ is\ a\ single\ digit\ number\n\ \n\ @param\ s\ the\ given\ string\n\ @return\ true\ if\ the\ given\ string\ is\ 0-9\n\ \ \ \ \ \ \ \ \ \ false\ otherwise\n
comment5.params=s
comment5.target=boolean\ isSpecial(java.lang.String)
comment5.text=\n\ Tells\ if\ a\ given\ string\ is\ a\ special\ character,\ ie\ single\ quotes\ "'"\ or\ a\ dash\ "-"\n\ \n\ @param\ s\ the\ given\ string\n\ @return\ true\ if\ the\ given\ string\ is\ a\ special\ character\n\ \ \ \ \ \ \ \ \ \ false\ otherwise\n
comment6.params=s
comment6.target=boolean\ isPhraseTerm(java.lang.String)
comment6.text=\n\ Tells\ if\ a\ given\ string\ is\ a\ phrase\ terminator,\ ie\ comma\ ","\ semicolon\ ";"\ or\ colon\ "\:"\n\ \n\ @param\ s\ the\ given\ string\n\ @return\ true\ if\ the\ given\ string\ is\ a\ phrase\ terminator\n\ \ \ \ \ \ \ \ \ \ false\ otherwise\n
comment7.params=s
comment7.target=boolean\ isSentTerm(java.lang.String)
comment7.text=\n\ Tells\ if\ a\ given\ string\ is\ a\ sentence\ terminator,\ ie\ period\ "."\ \n\ exclamation\ mark\ "\!"\ or\ question\ mark\ "?"\n\ \n\ @param\ s\ the\ given\ string\n\ @return\ true\ if\ the\ given\ string\ is\ a\ phrase\ terminator\n\ \ \ \ \ \ \ \ \ \ false\ otherwise\n
comment8.params=s
comment8.target=boolean\ isWhitespace(java.lang.String)
comment8.text=\n\ Tells\ if\ a\ given\ string\ is\ a\ whitespace,\ ie\ a\ single\ space,\ a\ new\ line,\ a\ tab,\ or\ \n\ carriage\ return\n\ \n\ @param\ s\ the\ given\ string\n\ @return\ true\ if\ the\ given\ string\ is\ a\ phrase\ terminator\n\ \ \ \ \ \ \ \ \ \ false\ otherwise\n
comment9.params=
comment9.target=boolean\ hasNextToken()
comment9.text=\n\ Tells\ there\ are\ more\ tokens\ left\ in\ the\ file;\ that\ is,\ you\ haven't\ reached\ the\ end\n\ \n\ @return\ true\ if\ there\ are\ more\ left\n\ \ \ \ \ \ \ \ \ \ false\ otherwise\n
numComments=11
