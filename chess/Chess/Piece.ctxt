#BlueJ class context
comment0.params=col\ fileName\ val
comment0.target=Piece(java.awt.Color,\ java.lang.String,\ int)
comment0.text=\n\ constructs\ a\ new\ Piece\ with\ the\ given\ attributes.\n\ \n\ @param\ col\ the\ color\ of\ the\ new\ piece\n\ @param\ fileName\ the\ name\ of\ the\ file\ used\ to\ display\ this\ piece\n\ @param\ val\ the\ relative\ value\ of\ the\ piece\ \n
comment1.params=
comment1.target=Board\ getBoard()
comment1.text=\n\ Getter\ for\ the\ board\ \n\ @return\ the\ board\ this\ piece\ is\ on\n
comment10.params=
comment10.target=java.util.ArrayList\ destinations()
comment10.text=\n\ Gets\ a\ list\ of\ Locations\ that\ this\ Piece\ can\ move\ to,\ given\ the\ circumstances\n\ of\ the\ board\ and\ the\ rules\ governing\ the\ movement\ of\ the\ Piece\n\ \n\ @return\ the\ possible\ Locations\n
comment11.params=dests\ direction
comment11.target=void\ sweep(java.util.ArrayList,\ int)
comment11.text=\n\ Adds\ to\ a\ given\ ArrayList\ all\ Locations\ in\ a\ given\ direction\ until\ another\ Piece\n\ or\ the\ edge\ of\ the\ board\ is\ reached.\ If\ the\ Piece\ encountered\ is\ of\ an\ opposing\ \n\ color,\ its\ Location\ is\ also\ added\ to\ the\ list\ (i.e.\ it\ can\ be\ captured)\n\ \n\ @param\ dests\ the\ list\ to\ which\ new\ locations\ will\ be\ added\n\ @param\ direction\ the\ direction\ in\ which\ to\ sweep\ for\ locations\n
comment2.params=
comment2.target=Location\ getLocation()
comment2.text=\n\ Getter\ for\ the\ location\ \n\ @return\ the\ location\ of\ this\ piece\ on\ the\ board\n
comment3.params=
comment3.target=java.awt.Color\ getColor()
comment3.text=\n\ Getter\ for\ the\ color\ \n\ @return\ the\ color\ of\ this\ piece\n
comment4.params=
comment4.target=java.lang.String\ getImageFileName()
comment4.text=\n\ Getter\ for\ the\ color\ \n\ @return\ the\ name\ of\ the\ file\ used\ to\ display\ this\ piece\n
comment5.params=
comment5.target=int\ getValue()
comment5.text=\n\ Getter\ for\ the\ value\ \n\ @return\ a\ number\ representing\ the\ relative\ value\ of\ this\ piece\n
comment6.params=brd\ loc
comment6.target=void\ putSelfInGrid(Board,\ Location)
comment6.text=\n\ Puts\ this\ piece\ into\ a\ board.\ If\ there\ is\ another\ piece\ at\ the\ given\n\ location,\ it\ is\ removed.\ <br\ />\n\ Precondition\:\ (1)\ This\ piece\ is\ not\ contained\ in\ a\ grid\ (2)\n\ <code>loc</code>\ is\ valid\ in\ <code>gr</code>\n\ @param\ brd\ the\ board\ into\ which\ this\ piece\ should\ be\ placed\n\ @param\ loc\ the\ location\ into\ which\ the\ piece\ should\ be\ placed\n
comment7.params=
comment7.target=void\ removeSelfFromGrid()
comment7.text=\n\ Removes\ this\ piece\ from\ its\ board.\n\ Precondition\:\ This\ piece\ is\ contained\ in\ a\ board\n
comment8.params=newLocation
comment8.target=void\ moveTo(Location)
comment8.text=\n\ Moves\ this\ piece\ to\ a\ new\ location.\ If\ there\ is\ another\ piece\ at\ the\n\ given\ location,\ it\ is\ removed.\n\ \n\ @precondition\ This\ piece\ is\ contained\ in\ a\ grid\n\ @precondition\ newLocation\ is\ valid\ in\ the\ grid\ of\ this\ piece\n\ @param\ newLocation\ the\ new\ location\n
comment9.params=dest
comment9.target=boolean\ isValidDestination(Location)
comment9.text=\n\ Tells\ if\ a\ given\ location\ in\ the\ board\ is\ valid\ for\ this\ Piece\ to\ go\ to\n\ it's\ valid\ if\ it's\ on\ the\ board\ (within\ its\ boundaries)\n\ and\ the\ destination\ is\ either\ unoccupied\ or\ occupied\ by\ a\ Piece\ of\ a\ different\ color\n\ \n\ @param\ dest\ the\ Location\ we're\ testing\ to\ see\ if\ it's\ valid\n\ \n\ @return\ true\ if\ the\ destination\ is\ valid\ (see\ method\ description)\n\ \ \ \ \ \ false\ otherwise\n
numComments=12
